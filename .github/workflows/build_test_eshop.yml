name: Build and test eshop workflow

on:
  workflow_dispatch:
  push:

jobs:
  Install:
    runs-on: ubuntu-latest

    steps:
      - name: Code checkout
        uses: actions/checkout@v4.1.1
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          
      - name: Setup NodeJS
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 14

      - name: Cache node modules
        uses: actions/cache@v4.0.2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: node_modules-

      - name: Install packages with npm
        run: |
          npm ci

  Build:
    needs: Install
    runs-on: ubuntu-latest

    steps:
      - name: Code checkout
        uses: actions/checkout@v4.1.1
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Setup NodeJS
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 14

      - name: Cache node modules
        uses: actions/cache@v4.0.2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Build
        run: |
          npm rebuild node-sass --force
          npm run build -- --colors

      - name: Cache node modules and build folder
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/cache@v4.0.2
        with:
          path: |
            ~/.npm
            ./node_modules
            ./build
          key: ${{ runner.os }}--build-${{ github.run_id }}
          restore-keys: ${{ runner.os }}--build-${{ github.run_id }}

  Test:
    needs: Install
    runs-on: ubuntu-latest

    steps:
      - name: Code checkout
        uses: actions/checkout@v4.1.1
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Setup NodeJS
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 14

      - name: Cache node modules
        uses: actions/cache@v4.0.2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Run tests
        run: |
          npm run test -- --colors

  Deploy:
    needs: [Build, Test]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3

      - name: Configure AWS credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "aws_session_token = ${{ secrets.AWS_SESSION_TOKEN }}" >> ~/.aws/credentials

      - name: List contents of ansible directory
        run: ls -la 

      - name: Run Ansible playbook
        run: |
          ansible-playbook - <<EOF
          - name: Deploy to EC2
            hosts: localhost
            gather_facts: no
            vars:
              access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
              secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
              session_token: "{{ lookup('env', 'AWS_SESSION_TOKEN') }}"
          tasks:
            - name: Launch EC2 Instance
              ec2_instance:
                instance_type: t3.medium
                image_id: ami-051f8a213df8bc089
                region: us-east-1
                key_name: test
                vpc_subnet_id: subnet-0d44c818b4376e0af
                tags:
                  Name: Eshop
                count: 1
                network:
                  assign_public_ip: yes
                wait: yes
                security_group: eShop
                aws_access_key: "{{ access_key }}"
                aws_secret_key: "{{ secret_key }}"
                security_token: "{{ session_token }}"
              register: ec2_instance_result

            - name: Add instance host to group
              add_host:
                hostname: "{{ item.public_ip_address }}"
                groupname: launched
              loop: "{{ ec2_instance_result.instances }}"

            - name: Wait for SSH connection
              delegate_to: "{{ item.public_dns_name }}"
              wait_for_connection:
                delay: 30
                timeout: 300
              loop: "{{ ec2_instance_result.instances }}"

          - name: Configure EC2 Instances
            hosts: launched
            become: yes
            gather_facts: no
            tasks:
              - name: Install Git and Docker
                yum:
                  name:
                    - git
                    - docker
                  state: latest
                  update_cache: yes

              - name: Start Docker service
                service:
                  name: docker
                  state: started
                  enabled: yes

              - name: Set proper rights to Docker service
                shell: usermod -a -G docker ec2-user

              - name: Fetch eshop from Git
                git:
                  repo: 'https://github.com/benes99/4IT572_project.git'
                  dest: ./app

              - name: Build Eshop Docker image
                docker_image:
                  path: "./app"
                  name: "eshop"
                  tag: "latest"
                  state: present
                  source: build

              - name: Run Eshop Docker container
                docker_container:
                  name: "eshop"
                  image: "eshop:latest"
                  state: started
                  restart_policy: always
                  ports:
                    - "80:3000"

              - name: Wait for eshop to run
                wait_for:
                  port: 80
                  host: "{{ inventory_hostname }}"
                  timeout: 300
          EOF

      - name: Cleanup AWS Credentials
        if: always()
        run: rm -rf ~/.aws
