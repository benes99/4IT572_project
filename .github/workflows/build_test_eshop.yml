name: Build, Test, and Deploy eshop workflow

on:
  workflow_dispatch:
  push:

jobs:
  Install:
    runs-on: ubuntu-latest

    steps:
      - name: Code checkout
        uses: actions/checkout@v4.1.1
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Setup NodeJS
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 14

      - name: Cache node modules
        uses: actions/cache@v4.0.2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: node_modules-

      - name: Install packages with npm
        run: |
          npm ci

  Build:
    needs: Install
    runs-on: ubuntu-latest

    steps:
      - name: Code checkout
        uses: actions/checkout@v4.1.1
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Setup NodeJS
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 14

      - name: Cache node modules
        uses: actions/cache@v4.0.2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Build
        run: |
          npm rebuild node-sass --force
          npm run build -- --colors

      - name: Cache node modules and build folder
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/cache@v4.0.2
        with:
          path: |
            ~/.npm
            ./node_modules
            ./build
          key: ${{ runner.os }}--build-${{ github.run_id }}
          restore-keys: ${{ runner.os }}--build-${{ github.run_id }}

  Test:
    needs: Install
    runs-on: ubuntu-latest

    steps:
      - name: Code checkout
        uses: actions/checkout@v4.1.1
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Setup NodeJS
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 14

      - name: Cache node modules
        uses: actions/cache@v4.0.2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Run tests
        run: |
          npm run test -- --colors

  Deploy:
    needs: [ Test ]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Code checkout
        uses: actions/checkout@v4.1.1
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Install Git, Docker, and Ansible
        uses: actions/setup-node@v4.0.2
        run: |
          sudo yum install -y git docker
          sudo amazon-linux-extras install -y ansible2
          sudo service docker start

      - name: Deploy to EC2
        hosts: localhost
        connection: local

        tasks:
          - name: Launch EC2 Instance
            ec2_instance:
              instance_type: t3.medium
              image_id: ami-051f8a213df8bc089
              region: us-east-1
              key_name: test
              vpc_subnet_id: subnet-0d44c818b4376e0af
              tags:
                Name: Eshop
              count: 1
              network:
                assign_public_ip: yes
              wait: yes
              security_group: eShop
              aws_access_key: "{{ secrets.AWS_ACCESS_KEY_ID }}"
              aws_secret_key: "{{ secrets.AWS_SECRET_ACCESS_KEY }}"
              security_token: "{{ secrets.AWS_SESSION_TOKEN }}"
            register: ec2_instance_result

          - name: Add instance host to group
            add_host:
              hostname: "{{ item.public_ip_address }}"
              groupname: launched
            loop: "{{ ec2_instance_result.instances }}"

          - name: Wait for SSH connection
            delegate_to: "{{ item.public_dns_name }}"
            wait_for_connection:
              delay: 30
              timeout: 300
            loop: "{{ ec2_instance_result.instances }}"

      - name: Configure EC2 Instances
        hosts: launched
        connection: ssh
        become: yes

        tasks:
          - name: Install Git and Docker
            yum:
              name:
                - git
                - docker
              state: latest
              update_cache: yes

          - service:
              name: docker
              state: started
              enabled: yes

          - name: Set proper rights to Docker service
            shell: usermod -a -G docker ec2-user

          - name: Fetch eshop from Git
            git:
              repo: 'https://github.com/benes99/4IT572_docker.git'
              dest: ./app

          - name: Build Eshop Docker image
            docker_image:
              build:
                path: ./app
              name: eshop
              tag: latest
              source: build

          - name: Run Eshop Docker
            docker_container:
              name: eshop
              image: eshop
              state: started
              ports:
                - "80:3000"

          - name: Wait for eshop to run
            wait_for:
              port: 80

